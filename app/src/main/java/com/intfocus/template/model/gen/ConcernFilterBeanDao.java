package com.intfocus.template.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.intfocus.template.subject.seven.bean.ConcernFilterBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONCERN_FILTER_BEAN".
*/
public class ConcernFilterBeanDao extends AbstractDao<ConcernFilterBean, Long> {

    public static final String TABLENAME = "CONCERN_FILTER_BEAN";

    /**
     * Properties of entity ConcernFilterBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Obj_name = new Property(2, String.class, "obj_name", false, "OBJ_NAME");
        public final static Property Pid = new Property(3, int.class, "pid", false, "PID");
        public final static Property Obj_num = new Property(4, String.class, "obj_num", false, "OBJ_NUM");
        public final static Property Uuid = new Property(5, String.class, "uuid", false, "UUID");
    }


    public ConcernFilterBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ConcernFilterBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONCERN_FILTER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"OBJ_NAME\" TEXT," + // 2: obj_name
                "\"PID\" INTEGER NOT NULL ," + // 3: pid
                "\"OBJ_NUM\" TEXT," + // 4: obj_num
                "\"UUID\" TEXT);"); // 5: uuid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONCERN_FILTER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConcernFilterBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getId());
 
        String obj_name = entity.getObj_name();
        if (obj_name != null) {
            stmt.bindString(3, obj_name);
        }
        stmt.bindLong(4, entity.getPid());
 
        String obj_num = entity.getObj_num();
        if (obj_num != null) {
            stmt.bindString(5, obj_num);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(6, uuid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConcernFilterBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getId());
 
        String obj_name = entity.getObj_name();
        if (obj_name != null) {
            stmt.bindString(3, obj_name);
        }
        stmt.bindLong(4, entity.getPid());
 
        String obj_num = entity.getObj_num();
        if (obj_num != null) {
            stmt.bindString(5, obj_num);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(6, uuid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConcernFilterBean readEntity(Cursor cursor, int offset) {
        ConcernFilterBean entity = new ConcernFilterBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // obj_name
            cursor.getInt(offset + 3), // pid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // obj_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // uuid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConcernFilterBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setObj_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPid(cursor.getInt(offset + 3));
        entity.setObj_num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUuid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConcernFilterBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConcernFilterBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConcernFilterBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
