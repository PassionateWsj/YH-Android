package com.intfocus.template.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.intfocus.template.model.response.attention.AttentionedItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENTIONED_ITEM".
*/
public class AttentionedItemDao extends AbstractDao<AttentionedItem, Long> {

    public static final String TABLENAME = "ATTENTIONED_ITEM";

    /**
     * Properties of entity AttentionedItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Main_data_id = new Property(1, String.class, "main_data_id", false, "MAIN_DATA_ID");
        public final static Property Main_data_name = new Property(2, String.class, "main_data_name", false, "MAIN_DATA_NAME");
        public final static Property Attention_item_id = new Property(3, String.class, "attention_item_id", false, "ATTENTION_ITEM_ID");
        public final static Property Attention_item_name = new Property(4, String.class, "attention_item_name", false, "ATTENTION_ITEM_NAME");
        public final static Property Main_attention_data = new Property(5, String.class, "main_attention_data", false, "MAIN_ATTENTION_DATA");
        public final static Property Attention_item_data = new Property(6, String.class, "attention_item_data", false, "ATTENTION_ITEM_DATA");
        public final static Property Updated_at = new Property(7, String.class, "updated_at", false, "UPDATED_AT");
    }


    public AttentionedItemDao(DaoConfig config) {
        super(config);
    }
    
    public AttentionedItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENTIONED_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MAIN_DATA_ID\" TEXT," + // 1: main_data_id
                "\"MAIN_DATA_NAME\" TEXT," + // 2: main_data_name
                "\"ATTENTION_ITEM_ID\" TEXT," + // 3: attention_item_id
                "\"ATTENTION_ITEM_NAME\" TEXT," + // 4: attention_item_name
                "\"MAIN_ATTENTION_DATA\" TEXT," + // 5: main_attention_data
                "\"ATTENTION_ITEM_DATA\" TEXT," + // 6: attention_item_data
                "\"UPDATED_AT\" TEXT);"); // 7: updated_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENTIONED_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttentionedItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String main_data_id = entity.getMain_data_id();
        if (main_data_id != null) {
            stmt.bindString(2, main_data_id);
        }
 
        String main_data_name = entity.getMain_data_name();
        if (main_data_name != null) {
            stmt.bindString(3, main_data_name);
        }
 
        String attention_item_id = entity.getAttention_item_id();
        if (attention_item_id != null) {
            stmt.bindString(4, attention_item_id);
        }
 
        String attention_item_name = entity.getAttention_item_name();
        if (attention_item_name != null) {
            stmt.bindString(5, attention_item_name);
        }
 
        String main_attention_data = entity.getMain_attention_data();
        if (main_attention_data != null) {
            stmt.bindString(6, main_attention_data);
        }
 
        String attention_item_data = entity.getAttention_item_data();
        if (attention_item_data != null) {
            stmt.bindString(7, attention_item_data);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(8, updated_at);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttentionedItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String main_data_id = entity.getMain_data_id();
        if (main_data_id != null) {
            stmt.bindString(2, main_data_id);
        }
 
        String main_data_name = entity.getMain_data_name();
        if (main_data_name != null) {
            stmt.bindString(3, main_data_name);
        }
 
        String attention_item_id = entity.getAttention_item_id();
        if (attention_item_id != null) {
            stmt.bindString(4, attention_item_id);
        }
 
        String attention_item_name = entity.getAttention_item_name();
        if (attention_item_name != null) {
            stmt.bindString(5, attention_item_name);
        }
 
        String main_attention_data = entity.getMain_attention_data();
        if (main_attention_data != null) {
            stmt.bindString(6, main_attention_data);
        }
 
        String attention_item_data = entity.getAttention_item_data();
        if (attention_item_data != null) {
            stmt.bindString(7, attention_item_data);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(8, updated_at);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AttentionedItem readEntity(Cursor cursor, int offset) {
        AttentionedItem entity = new AttentionedItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // main_data_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // main_data_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // attention_item_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // attention_item_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // main_attention_data
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // attention_item_data
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // updated_at
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttentionedItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMain_data_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMain_data_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAttention_item_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttention_item_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMain_attention_data(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAttention_item_data(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdated_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttentionedItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttentionedItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttentionedItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
