package com.intfocus.template.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.intfocus.template.model.entity.PushMsgBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_MSG_BEAN".
*/
public class PushMsgBeanDao extends AbstractDao<PushMsgBean, Long> {

    public static final String TABLENAME = "PUSH_MSG_BEAN";

    /**
     * Properties of entity PushMsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ticker = new Property(1, String.class, "ticker", false, "TICKER");
        public final static Property Body_title = new Property(2, String.class, "body_title", false, "BODY_TITLE");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Obj_id = new Property(7, String.class, "obj_id", false, "OBJ_ID");
        public final static Property Template_id = new Property(8, String.class, "template_id", false, "TEMPLATE_ID");
        public final static Property Params_mapping = new Property(9, String.class, "params_mapping", false, "PARAMS_MAPPING");
        public final static Property Debug_timestamp = new Property(10, String.class, "debug_timestamp", false, "DEBUG_TIMESTAMP");
        public final static Property New_msg = new Property(11, boolean.class, "new_msg", false, "NEW_MSG");
    }


    public PushMsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PushMsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_MSG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TICKER\" TEXT," + // 1: ticker
                "\"BODY_TITLE\" TEXT," + // 2: body_title
                "\"TEXT\" TEXT," + // 3: text
                "\"TYPE\" TEXT," + // 4: type
                "\"TITLE\" TEXT," + // 5: title
                "\"URL\" TEXT," + // 6: url
                "\"OBJ_ID\" TEXT," + // 7: obj_id
                "\"TEMPLATE_ID\" TEXT," + // 8: template_id
                "\"PARAMS_MAPPING\" TEXT," + // 9: params_mapping
                "\"DEBUG_TIMESTAMP\" TEXT," + // 10: debug_timestamp
                "\"NEW_MSG\" INTEGER NOT NULL );"); // 11: new_msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushMsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ticker = entity.getTicker();
        if (ticker != null) {
            stmt.bindString(2, ticker);
        }
 
        String body_title = entity.getBody_title();
        if (body_title != null) {
            stmt.bindString(3, body_title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String obj_id = entity.getObj_id();
        if (obj_id != null) {
            stmt.bindString(8, obj_id);
        }
 
        String template_id = entity.getTemplate_id();
        if (template_id != null) {
            stmt.bindString(9, template_id);
        }
 
        String params_mapping = entity.getParams_mapping();
        if (params_mapping != null) {
            stmt.bindString(10, params_mapping);
        }
 
        String debug_timestamp = entity.getDebug_timestamp();
        if (debug_timestamp != null) {
            stmt.bindString(11, debug_timestamp);
        }
        stmt.bindLong(12, entity.getNew_msg() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushMsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ticker = entity.getTicker();
        if (ticker != null) {
            stmt.bindString(2, ticker);
        }
 
        String body_title = entity.getBody_title();
        if (body_title != null) {
            stmt.bindString(3, body_title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String obj_id = entity.getObj_id();
        if (obj_id != null) {
            stmt.bindString(8, obj_id);
        }
 
        String template_id = entity.getTemplate_id();
        if (template_id != null) {
            stmt.bindString(9, template_id);
        }
 
        String params_mapping = entity.getParams_mapping();
        if (params_mapping != null) {
            stmt.bindString(10, params_mapping);
        }
 
        String debug_timestamp = entity.getDebug_timestamp();
        if (debug_timestamp != null) {
            stmt.bindString(11, debug_timestamp);
        }
        stmt.bindLong(12, entity.getNew_msg() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PushMsgBean readEntity(Cursor cursor, int offset) {
        PushMsgBean entity = new PushMsgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ticker
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // body_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // obj_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // template_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // params_mapping
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // debug_timestamp
            cursor.getShort(offset + 11) != 0 // new_msg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushMsgBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTicker(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBody_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setObj_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTemplate_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParams_mapping(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDebug_timestamp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNew_msg(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushMsgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushMsgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushMsgBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
