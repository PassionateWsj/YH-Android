package com.intfocus.shengyiplus.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.intfocus.shengyiplus.model.entity.Source;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOURCE".
*/
public class SourceDao extends AbstractDao<Source, Long> {

    public static final String TABLENAME = "SOURCE";

    /**
     * Properties of entity Source.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReportId = new Property(1, String.class, "reportId", false, "REPORT_ID");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property Key = new Property(3, String.class, "key", false, "KEY");
        public final static Property Config = new Property(4, String.class, "config", false, "CONFIG");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property IsShow = new Property(6, int.class, "isShow", false, "IS_SHOW");
        public final static Property IsList = new Property(7, int.class, "isList", false, "IS_LIST");
        public final static Property IsFilter = new Property(8, int.class, "isFilter", false, "IS_FILTER");
        public final static Property Value = new Property(9, String.class, "value", false, "VALUE");
    }


    public SourceDao(DaoConfig config) {
        super(config);
    }
    
    public SourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOURCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REPORT_ID\" TEXT," + // 1: reportId
                "\"UUID\" TEXT," + // 2: uuid
                "\"KEY\" TEXT," + // 3: key
                "\"CONFIG\" TEXT," + // 4: config
                "\"TYPE\" TEXT," + // 5: type
                "\"IS_SHOW\" INTEGER NOT NULL ," + // 6: isShow
                "\"IS_LIST\" INTEGER NOT NULL ," + // 7: isList
                "\"IS_FILTER\" INTEGER NOT NULL ," + // 8: isFilter
                "\"VALUE\" TEXT);"); // 9: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOURCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Source entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(2, reportId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(4, key);
        }
 
        String config = entity.getConfig();
        if (config != null) {
            stmt.bindString(5, config);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getIsShow());
        stmt.bindLong(8, entity.getIsList());
        stmt.bindLong(9, entity.getIsFilter());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(10, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Source entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(2, reportId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(4, key);
        }
 
        String config = entity.getConfig();
        if (config != null) {
            stmt.bindString(5, config);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getIsShow());
        stmt.bindLong(8, entity.getIsList());
        stmt.bindLong(9, entity.getIsFilter());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(10, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Source readEntity(Cursor cursor, int offset) {
        Source entity = new Source( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // key
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // config
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.getInt(offset + 6), // isShow
            cursor.getInt(offset + 7), // isList
            cursor.getInt(offset + 8), // isFilter
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Source entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReportId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setConfig(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsShow(cursor.getInt(offset + 6));
        entity.setIsList(cursor.getInt(offset + 7));
        entity.setIsFilter(cursor.getInt(offset + 8));
        entity.setValue(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Source entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Source entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Source entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
